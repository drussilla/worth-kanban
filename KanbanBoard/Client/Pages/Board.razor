@page "/board/{id:guid}"
@using Fluxor;
@using KanbanBoard.Client.Store.BoardUseCase;
@using KanbanBoard.Client.Store.StageUseCase;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using KanbanBoard.Shared
@using KanbanBoard.Client.Components
@inject HttpClient Http

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>@BoardName</PageTitle>

<div class="d-flex">
    @if (State.Value.IsEditing)
    {
        <TextInputReactive placeholder="Title" class="@((updatedName == string.Empty ? "form-control is-invalid" : "form-control"))" @bind-Value="updatedName" />
        <button class="btn" @onclick="SaveEdit" disabled="@(updatedName == string.Empty)"><span class="oi oi-check" aria-hidden="true"></span></button>
        <button class="btn" @onclick="CancelEdit"><span class="oi oi-x" aria-hidden="true"></span></button>
    }
    else
    {
        <h1>@BoardName</h1>
        <button class="btn" @onclick="EditBoardName"><span class="oi oi-pencil" aria-hidden="true"></span></button>
    }    
</div>

<div class="stage-container">

    @if (State.Value.SelectedBoard != null)
    {
        <div class="stage-wrapper row flex-row flex-sm-nowrap py-3">

            @foreach (var stage in State.Value.Boards[State.Value.SelectedBoard.Value].Stages.Values!)
            {
                <StageComponent StageId="@stage.Id" />
            }

            <button class="add-stage btn btn-primary" @onclick="AddStage"><span class="oi oi-plus" aria-hidden="true"></span></button>
        </div>
    }

</div>

@code {

    [Parameter]
    public Guid Id { get; set; }

    [Inject]
    public IState<BoardsState> State { get; set; }

    [Inject]
    public IDispatcher Dispatcher { get; set; }

    private string updatedName;

    protected override void OnParametersSet()
    {
        Dispatcher.Dispatch(new SelectBoardAction(Id));
        updatedName = BoardName;
    }

    private string BoardName => State.Value.SelectedBoard == null ? "Loading board..." : State.Value.GetSelectedBoard?.Name!;

    private void AddStage()
    {
        Dispatcher.Dispatch(new AddStageAction(Id));
    }

    private void EditBoardName()
    {
        Dispatcher.Dispatch(new EditBoardAction(Id));
    }

    private void SaveEdit()
    {
        Dispatcher.Dispatch(new SaveBoardAction(Id, updatedName));
    }

    private void CancelEdit()
    {
        updatedName = BoardName;
        Dispatcher.Dispatch(new CancelEditBoardAction(Id));
    }
}
