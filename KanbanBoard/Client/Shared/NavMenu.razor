@using KanbanBoard.Client.Store.BoardUseCase;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using KanbanBoard.Shared
@using Fluxor

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@attribute [Authorize]
@inject HttpClient Http

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">KanbanBoard</a>
    </div>
</div>

@if (BoardsState.Value.IsLoading)
{
    <p class="text-white"><em>Loading...</em></p>
}
else
{
    <div class="nav-scrollable">
        <nav class="flex-column">
            @foreach (var board in BoardsState.Value.Boards.Values)
            {
                var link = $"board/{board.Id}";
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="@link" Match="NavLinkMatch.All">
                        <span class="oi oi-task" aria-hidden="true"></span> <span class="text-truncate mx-1">@board.Name</span>
                    </NavLink>
                </div>
            }
            <hr />
            <div class="nav-item px-3">
                <a href="#" @onclick="AddBoard" class="nav-link text-truncate">
                    <span class="oi oi-plus" aria-hidden="true"></span> <span class="text-truncate mx-1">New Board</span>
                </a>                    
            </div>
        </nav>
        
    </div>
}



@code {

    [Inject]
    public IDispatcher Dispatcher { get; set; }


    [Inject]
    private IState<BoardsState> BoardsState { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Dispatcher.Dispatch(new FetchBoardsAction());
    }

    private void AddBoard()
    {
        // Settng default name here, user can rename it after we created a board.
        Dispatcher.Dispatch(new AddBoardAction("Create Board"));
    }
}
