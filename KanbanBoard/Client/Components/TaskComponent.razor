@using Fluxor;
@using KanbanBoard.Client.Store.TaskUseCase;
@using KanbanBoard.Client.Store.BoardUseCase;
@using KanbanBoard.Shared;

@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@if (Task != null)
{
    <div class="border border-light py-2">
        <div class="card draggable shadow-sm">
            <div class="card-body p-2">
                @if (Task.IsEditing)
                {
                    <div class="form-group row mb-3">
                        <div class="col-md-12">
                            <!-- Inline validation. This can be moved to a separate method or class -->
                            <TextInputReactive placeholder="Title" class="@((updatedTitle == string.Empty ? "form-control is-invalid" : "form-control"))" @bind-Value="updatedTitle" />
                        </div>
                    </div>
                    <div class="form-group row mb-3">
                        <div class="col-md-12">
                            <InputTextArea placeholder="Description" class="form-control" @bind-Value="updatedDescription" />
                        </div>
                    </div>

                    <!-- Inline validation. This can be moved to a separate method or class -->
                    <button class="btn btn-primary btn-sm" disabled="@(updatedTitle == string.Empty)" @onclick="OnSave">Save</button>
                    <button class="btn btn-secondary btn-sm" @onclick="OnCancel">Cancel</button>
                }
                else
                {
                    <div class="card-title">
                        <p class="lead font-weight-light">@Task.Title</p>
                    </div>
                    <p>
                        @Task.Description
                    </p>
                    <button class="btn btn-primary btn-sm" @onclick="OnEdit">Edit</button>
                    <button class="btn btn-danger btn-sm" @onclick="OnDelete">Delete</button>
                }

            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public Guid TaskId { get; set; }

    [Parameter]
    public Guid StageId { get; set; }

    [Inject]
    public IState<BoardsState> State { get; set; }

    [Inject]
    public IDispatcher Dispatcher { get; set; }

    private string updatedTitle;
    private string updatedDescription;

    private TaskState? Task => State.Value.GetSelectedBoard?.Stages[StageId].Tasks.ContainsKey(TaskId) ?? false
        ? State.Value.GetSelectedBoard?.Stages[StageId].Tasks[TaskId]
        : null;

    protected override void OnParametersSet()
    {
        updatedTitle = Task.Title;
        updatedDescription = Task.Description;
    }

    private void OnEdit()
    {
        Dispatcher.Dispatch(new EditTaskAction(TaskId, StageId));
    }

    private void OnDelete()
    {
        Dispatcher.Dispatch(new DeleteTaskAction(TaskId, StageId));
    }

    private void OnSave()
    {
        Dispatcher.Dispatch(new SaveTaskAction(TaskId, StageId, State.Value.SelectedBoard!.Value, updatedTitle, updatedDescription));
    }

    private void OnCancel() 
    {
        updatedTitle = Task.Title;
        updatedDescription = Task.Description;
        Dispatcher.Dispatch(new CancelTaskEditAction(TaskId, StageId));
    }
}
