@using Fluxor;
@using KanbanBoard.Client.Store.BoardUseCase;
@using KanbanBoard.Client.Store.TaskUseCase;
@using KanbanBoard.Shared;

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<div class="col-sm-6 col-md-4 col-xl-3">
    <div class="card bg-light">
        <div class="card-body">
            <h6 class="card-title text-uppercase text-truncate py-2">@Stage?.Name</h6>
            @if (Stage != null)
            {   
                <Dropzone Class="drop-zone" Items="Stage.Tasks.Values.ToList()" OnItemDrop="@((TaskState arg) => OnItemDrop(arg))">
                    <TaskComponent TaskId="@context.Id" StageId="@StageId" />
                </Dropzone>
            }

            <button class="btn btn-primary" @onclick="AddTask">Add Task</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid StageId { get; set; }

    [Inject]
    public IState<BoardsState> State { get; set; }

    [Inject]
    public IDispatcher Dispatcher { get; set; }

    private void AddTask()
    {
        Dispatcher.Dispatch(new AddTaskAction(StageId));
    }

    private void OnItemDrop(TaskState item)
    {
        Dispatcher.Dispatch(new MoveTaskAction(item.Id, StageId));
    }

    private StageState? Stage => State.Value.GetSelectedBoard?.GetStageState(StageId);
}
